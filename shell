#! /usr/bin/env python3

import os, sys, time, re, cmd
loop = True
while loop == True:
    reply = input("$: ")
    if reply == "exit":
        loop = False
        continue
    elif reply == "":
        continue
    pid = os.getpid()

    os.write(1, ("About to fork (pid:%d)\n" % pid).encode())

    rc = os.fork()

    if rc < 0:
        os.write(2, ("fork failed, returning %d\n" % rc).encode())
        sys.exit(1)

    elif rc == 0:  # child
        os.write(1, ("Child: My pid==%d.  Parent's pid=%d\n" %
                     (os.getpid(), pid)).encode())
        args = reply.split()
        if len(args) == 3:
            if args[1] == '<':
                os.close(0)  # redirect child's stdin
                file = args[2]
                sys.stdin = open(file, "r")
                fd = sys.stdin.fileno()
                os.set_inheritable(fd, True)
                args[1] = sys.stdin.read()

            if args[1] == '>':
                file = args[2]
                os.close(1)  # redirect child's stdout
                sys.stdout = open(file, "w")
                fd = sys.stdout.fileno()  # os.open("p4-output.txt", os.O_CREAT)
                os.set_inheritable(fd, True)
                args[1] = file
                args[2] = file
                os.write(2, ("Child: opened fd=%d for writing\n" % fd).encode())


        for dir in re.split(":", os.environ['PATH']):  # try each directory in the path
            program = "%s/%s" % (dir, args[0])
            os.write(1, ("Child:  ...trying to exec %s\n" % program).encode())
            try:
                os.execve(program, args, os.environ)  # try to exec program
            except FileNotFoundError:  # ...expected
                pass  # ...fail quietly
        os.write(2, ("Command not found\n").encode())
        os.write(2, ("Child:    Could not exec %s\n" % args[0]).encode())
        sys.exit(1)

    else:  # parent (forked ok)
        os.write(1, ("Parent: My pid=%d.  Child's pid=%d\n" %
                     (pid, rc)).encode())
        childPidCode = os.wait()
        os.write(1, ("Parent: Child %d terminated with exit code %d\n" %
                     childPidCode).encode())

